{
  "name": "<%= name %>",
<% if (!public) { -%>
  "private": true,
<% } -%>
  "publishConfig": {
    "access": "<% if (public) { %>public<% } else { %>restricted<% } %>"
  },
  "version": "<%= initialVersion %>",
  "license": "<%= license %>",
  "homepage": "<%= repository %>",
  "repository": {
    "type": "git",
    "url": "<%= repository %>"
  },
  "description": "<%= description %>",
  "keywords": [
    <%- `${keywords.trim().split(/[, ]+/).map(k => `"${k.trim()}"`).join(', ')}` %>
  ],
  "bugs": {
    "url": "<%- repository %>/issues",
    "email": "<%- email %>"
  },
  "author": "<%- author %> <<%- email %>> (<%- website %>)",
  "contributors": [
    "<%- author %> <<%- email %>> (<%- website %>)"
  ],
<% if (useBuildTools && platforms.includes(this.NODE_PLATFORM)) { -%>
  "main": "lib/module/commonjs/index.js",
  "module": "lib/module/esnext/index.js",
  "jsnext:main": "lib/module/esnext/index.js",
<% } else if (platforms.includes(this.BROWSER_PLATFORM)) { -%>
  "main": "lib/browser/index.min.js",
<% } else { -%>
  "main": "index.js",
<% } -%>
<% if (useBuildTools) { -%>
  "types": "lib/types/index.d.ts",
<% } -%>
<% if (useBuildTools && platforms.includes(this.BROWSER_PLATFORM)) { -%>
  "browser": "lib/browser/index.min.js",
  "unpkg": "lib/browser/index.min.js",
  "jsdelivr": "lib/browser/index.min.js",
<% } -%>
  "scripts": {
<% if (useBuildTools && platforms.includes(this.NODE_PLATFORM) && platforms.includes(this.BROWSER_PLATFORM)) { -%>
    "build": "<%= pm %> run build.module && <%= pm %> run build.browser && <%= pm %> run build.declarations",
<% } else if (useBuildTools && platforms.includes(this.NODE_PLATFORM)) { -%>
    "build": "<%= pm %> run build.module && <%= pm %> run build.declarations",
<% } else if (useBuildTools && platforms.includes(this.BROWSER_PLATFORM)) { -%>
    "build": "<%= pm %> run build.browser && <%= pm %> run build.declarations",
<% } -%>
<% if (useBuildTools && platforms.includes(this.NODE_PLATFORM)) { -%>
    "build.module": "<%= pm %> run build.module.commonjs && <%= pm %> run build.module.esnext",
    "build.module.commonjs": "NODE_ENV=production tsc --project build/module/tsconfig.commonjs.json",
    "build.module.esnext": "NODE_ENV=production tsc --project build/module/tsconfig.esnext.json",
<% } -%>
<% if (useBuildTools) { -%>
    "build.declarations": "NODE_ENV=production tsc --project build/declarations/tsconfig.declarations.json",
<% } -%>
<% if (useBuildTools && platforms.includes(this.BROWSER_PLATFORM)) { -%>
    "build.browser": "NODE_ENV=production webpack --config ./build/browser/production.config.ts --progress --hide-modules",
    "analysis.bundle": "NODE_ENV=production webpack --config ./build/browser/analysis.config.ts --progress --hide-modules",
<% } -%>
<% if (useLinter) { -%>
    "lint": "tslint -p tsconfig.json --format codeFrame",
    "fix": "tslint -p tsconfig.json --fix",
<% } -%>
<% if (useBuildTools && platforms.includes(this.NODE_PLATFORM) && platforms.includes(this.BROWSER_PLATFORM)) { -%>
    "test": "<%= pm %> run test.module && <%= pm %> run test.browser",
<% } else if (useBuildTools && platforms.includes(this.BROWSER_PLATFORM)) { -%>
    "test": "<%= pm %> run test.browser",
<% } else if (useBuildTools && platforms.includes(this.NODE_PLATFORM)) { -%>
    "test": "<%= pm %> run test.module",
<% } else { -%>
    "test": "NODE_ENV=test mocha --opts ./spec/mocha.opts",
<% } -%>
<% if (useBuildTools && platforms.includes(this.NODE_PLATFORM)) { -%>
    "test.module": "NODE_ENV=test mocha --opts ./spec/mocha.opts",
<% } -%>
<% if (useBuildTools && platforms.includes(this.BROWSER_PLATFORM)) { -%>
    "test.browser": "NODE_ENV=test karma start build/browser/karma.config.ts --single-run",
<% } -%>
<% if (useBuildTools && platforms.includes(this.BROWSER_PLATFORM) && !platforms.includes(this.NODE_PLATFORM)) { -%>
    "test.with.coverage": "NODE_ENV=test <%= pm %> run test",
<% } else { -%>
    "test.with.coverage": "NODE_ENV=test nyc <%= pm %> run test && nyc report --reporter=text-lcov > coverage/lcov.info",
<% } -%>
<% if (useBuildTools === false || platforms.includes(this.NODE_PLATFORM)) { -%>
    "test.watch": "NODE_ENV=test mocha --opts ./spec/mocha.opts --watch --watch-dirs ./spec/ --watch-extensions ts,tsx",
<% } else if (useBuildTools && platforms.includes(this.BROWSER_PLATFORM)) { -%>
    "test.watch": "NODE_ENV=test karma start build/browser/karma.config.ts",
<% } -%>
    "coverage": "<%= pm %> run coverage.generate && <%= pm %> run coverage.show",
<% if (useBuildTools && platforms.includes(this.NODE_PLATFORM)) { -%>
    "coverage.generate": "NODE_ENV=test nyc <%= pm %> run test.module",
<% } else if (useBuildTools && platforms.includes(this.BROWSER_PLATFORM)) { -%>
    "coverage.generate": "NODE_ENV=test <%= pm %> run test.browser",
<% } else { -%>
    "coverage.generate": "NODE_ENV=test nyc <%= pm %> run test",
<% } -%>
    "coverage.show": "opn coverage/index.html",
<% if (codeQualityTools.includes('codecov')) { -%>
    "coverage.codecov": "codecov -f 'coverage/lcov.info'",
<% } -%>
<% if (codeQualityTools.includes('codacy')) { -%>
    "coverage.codacy": "cat coverage/lcov.info | codacy-coverage",
<% } -%>
<% if (generateDocs) { -%>
    "docs": "<%= pm %> run docs.html && <%= pm %> run docs.json",
    "docs.html": "typedoc src --mode modules --target es6 --mode file --theme default --out docs",
    "docs.json": "typedoc src --mode file --json docs/docs.json",
    "docs.show": "<%= pm %> run docs && opn docs/index.html",
    "docs.publish": "<%= pm %> run docs && gh-pages -d docs",
<% } -%>
    "release.major": "release major && <%= pm %> publish<% if (generateDocs) { %> && <%= pm %> run docs.publish<% } %>",
    "release.minor": "release minor && <%= pm %> publish<% if (generateDocs) { %> && <%= pm %> run docs.publish<% } %>",
    "release.patch": "release patch && <%= pm %> publish<% if (generateDocs) { %> && <%= pm %> run docs.publish<% } %>",
    "release.pre": "release pre && <%= pm %> publish",
    "checkPackage": "<% if (useBuildTools) { %><%= pm %> run build && <% } %><% if (useLinter) { %><%= pm %> run lint && <% } %><%= pm %> run test",
    "commit": "git-cz",
    "prepublishOnly": "<%= pm %> run checkPackage",
    "prerelease.major": "<%= pm %> run checkPackage",
    "prerelease.minor": "<%= pm %> run checkPackage",
    "prerelease.patch": "<%= pm %> run checkPackage",
    "prerelease.pre": "<%= pm %> run checkPackage",
<% if (useBuildTools) { -%>
    "clean": "rm -rf ./lib<% if (generateDocs) { -%> ./docs<% } %> ./coverage<% if (useBuildTools && platforms.includes(this.BROWSER_PLATFORM)) { %> ./bundle-analysis<% } %> ./.nyc_output",
<% } -%>
    "createLink": "<%= pm %> link --silent > /dev/null 2>&1 && <%= pm %> link --silent $npm_package_name"
  },
  "config": {
    "commitizen": {
      "path": "node_modules/cz-conventional-changelog"
    }
  },
  "dependencies": {
    "tslib": "^1.9.0"
  },
  "devDependencies": {
    "@commitlint/cli": "^6.1.3",
    "@commitlint/config-conventional": "^6.1.3",
    "@types/chai": "^4.1.2",
    "@friends-of-js/typescript-configs": "^1.0.5",
<% if (useLinter) { -%>
    "@friends-of-js/tslint-configs": "^1.0.5",
<% } -%>
<% if (platforms.includes(this.BROWSER_PLATFORM)) { -%>
    "@types/lodash.camelcase": "^4.3.3",
<% } -%>
    "@types/mocha": "^5.0.0",
    "@types/node": "^9.6.5",
<% if (platforms.includes(this.BROWSER_PLATFORM)) { -%>
    "@types/tapable": "^1.0.1",
    "@types/webpack": "^4.1.3",
    "@types/webpack-dev-middleware": "^2.0.1",
    "awesome-typescript-loader": "^5.0.0",
    "istanbul-instrumenter-loader": "^3.0.1",
    "karma": "^2.0.0",
    "karma-chai": "^0.1.0",
    "karma-chrome-launcher": "^2.2.0",
<% if (!platforms.includes(this.NODE_PLATFORM)) { -%>
    "karma-coverage": "^1.1.1",
    "karma-coverage-istanbul-reporter": "^1.4.2",
<% } -%>
    "karma-firefox-launcher": "^1.1.0",
    "karma-mocha": "^1.3.0",
    "karma-mocha-reporter": "^2.2.5",
    "karma-notify-reporter": "^1.0.1",
    "karma-webpack": "^3.0.0",
    "ts-loader": "^4.1.0",
    "webpack": "^4.5.0",
    "webpack-cli": "^2.0.14",
    "webpack-build-notifier": "^0.1.23",
    "webpack-bundle-analyzer": "^2.11.1",
    "webpack-merge": "^4.1.2",
<% } -%>
    "chai": "^4.1.2",
<% if (codeQualityTools.includes('codacy')) { -%>
    "codacy-coverage": "^2.1.1",
<% } -%>
<% if (codeQualityTools.includes('codecov')) { -%>
    "codecov": "^3.0.0",
<% } -%>
    "commitizen": "^2.9.6",
    "cz-conventional-changelog": "^2.1.0",
    "husky": "^1.0.0-rc.1",
<% if (platforms.includes(this.BROWSER_PLATFORM)) { -%>
    "lodash.camelcase": "^4.3.0",
<% } -%>
    "mocha": "^5.1.0",
    "nyc": "^11.6.0",
    "opn-cli": "^3.1.0",
    "release": "^3.1.7",
    "ts-node": "^5.0.1",
<% if (useLinter) { -%>
    "tslint": "^5.9.1",
<% } -%>
<% if (generateDocs) { -%>
    "typedoc": "^0.11.1",
    "gh-pages": "^1.1.0",
<% } -%>
    "tsconfig-paths": "^3.2.0",
    "typescript": "^2.8.1"
  }
}
